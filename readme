Ce projet a pour but de générer aléatoirement un labyrinthe et mettre en place un algorithme génétique afin de résoudre le labyrinthe.
Ce projet est composé de 2 fichiers Python principaux : l'un contient les fonctions permettant la création et l'affichage des labyrinthes ("dijkstra.py"), et l'autre contient la gestion génétique en elle même ("genetic.py")

L'algorithme génétique actuel ne permet pas de faire baisser de façon sûre la valeur de la fitness des individus. Cela est ici dû à un problème de reproduction des chemins qui semble mal adapté, les nouveaux chemins créés étant souvent un mélange non optimisé de 2 chemins. En effet, même en diminuant le taux de sélection, je n'ai pu éviter cela. Même avec ces individus les plus performants, le mélange de leur gène n'a généré que trop rarement un individu plus performant car les parties ne coincidaient pas logiquement. J'ai aussi testé d'éviter ce problème en augmentant le taux de sélection et le taux de mutation pour plus miser sur les mêmes individus mais plus modifiés à chaque génération. Et même si les résultats étaient quelques fois relativement encourageant, cela n'a pas non plus été un pourcentage de réussite acceptable.

Une possibilité pour régler ces problèmes serait de supposer des individus "plus intelligents". Je pense par exemple à la possibilité pour les individus de ne pas passer par un endroit déjà visité ou une meilleure gestion de la reproduction (bien que je n'ai pas trouvé pour le moment de piste exploitable)





